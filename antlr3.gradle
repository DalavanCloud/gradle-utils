import java.nio.file.Paths;
import org.gradle.api.tasks.JavaExec;

ext.antlr3 = [
    antlrSource: 'src/main/antlr3',
    destinationDir: "src/generated-sources/antlr3"
]

task antlr3OutputDir << {
	mkdir(antlr3.destinationDir)
}

task antlr3Task(dependsOn: antlr3OutputDir) {
	description = 'Generates Java sources from Antlr3 grammars.'

	inputs.dir file(antlr3.antlrSource)
	outputs.dir file(antlr3.destinationDir)

	def grammars = fileTree(antlr3.antlrSource).include('**/*.g')

	grammars.files.each {File grammarFile ->
		java.nio.file.Path grammar = Paths.get(grammarFile.absolutePath)
		java.nio.file.Path base = Paths.get(new File(project.projectDir, antlr3.antlrSource).absolutePath)
		java.nio.file.Path relPath = base.relativize(grammar)
		
		File relFile = relPath.toFile()
		String pkgDir = relFile.getParentFile()
		String pkg = pkgDir.toString().replace(File.separator, '.')
		
		doLast {
			javaexec {
				main = 'org.antlr.Tool'
				classpath = configurations.compile
				
				args = ["-o", "${antlr3.destinationDir}/${pkgDir}", grammarFile].flatten()
			}
		}
	}	
}

compileJava.dependsOn antlr3Task
sourceSets.main.java.srcDirs += antlr3.destinationDir

